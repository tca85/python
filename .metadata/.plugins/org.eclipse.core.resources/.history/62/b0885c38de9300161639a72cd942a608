# -*- coding: UTF-8 -*-

'''
Curso Python I: Programando com a linguagem
https://cursos.alura.com.br/course/introducao-ao-python
Python 2.7

Toda classe que recebe "object" como argumento é uma classe nova
obs: o arquivo "módulo.py" pode ter inúmeras classes

@author: tca85
'''

#============================================================================================
class Perfil(object):
    'Classe padrão para perfis de usuários'

    #-----------------------------------------------------------------------------------------
    def __init__(self, nome, telefone, empresa):
        '''
        o método construtor precisa ter o nome __init__ e também receber "self" (utilizado como convenção)
        self é uma referência ao objeto que criamos a partir da classe
        '''
        
        # atributos de instância
        self.nome = nome
        self.telefone = telefone
        self.empresa = empresa
        
        # para indicarmos que determinado atributo (também pode ser feito com método) 
        # da classe não deve ser publico que é através do prefixo __ em sua declaração.
        self.__curtidas = 0
        
    #-----------------------------------------------------------------------------------------
    def imprimir(self):
        print 'Nome : %s, Telefone: %s, Empresa: %s' % (self.nome, self.telefone, self.empresa)
        
    #-----------------------------------------------------------------------------------------
    def curtir(self):
        self.__curtidas += 1
        
    #-----------------------------------------------------------------------------------------
    def obter_curtidas(self):
        return self.__curtidas
    
    #-----------------------------------------------------------------------------------------
    '''
    
    '''
    def gerar_perfis(self, nome_arquivo):
        arquivo = open(nome_arquivo, 'r')
        perfis = []
        
        for linha in arquivo:
            valores = linha.split(',')
            perfis.append(Perfil(*valores))
            
        arquivo.close()
        return perfis
    
#============================================================================================
class PerfilVIP(Perfil):
    
    #-----------------------------------------------------------------------------------------
    def __init__(self, nome, telefone, empresa, apelido):
        
        # Recebe um atributo a mais, "apelido", e mantém o comportamento da classe pai
        # utilizando o super
        super(PerfilVIP, self).__init__(nome, telefone, empresa)
        self.apelido = apelido
    
    #-----------------------------------------------------------------------------------------
    def obter_creditos(self):
        
        # Para acessar o self de uma classe pai a partir de sua filha, utilizamos a função/método super
        # recebe como primeiro parâmetro o nome da classe filha e como segundo parâmetro seu self
        # caso contrário, não seria possível acessar o atributo __curtidas da classe pai
        return super(PerfilVIP, self).obter_curtidas() * 10.0    
    
    #-----------------------------------------------------------------------------------------